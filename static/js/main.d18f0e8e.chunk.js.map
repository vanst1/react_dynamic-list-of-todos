{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","onTodoSelected","selectedTodoId","className","map","todo","id","completed","classNames","title","type","onClick","TodoFilter","searchQuery","todosFilter","onSearchQueryChange","onTodosFilterChange","value","onChange","event","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","clearSelectedTodo","useState","user","setUser","isLoadingError","setIsLoadingError","useEffect","getUserFromServer","a","userId","userFromServer","catch","href","email","name","App","setTodos","isDataLoading","setIsDataLoading","setSelectedTodoId","setSearchQuery","setTodosFilter","visibleTodos","filter","Error","selectedTodo","todosFromServer","allTodos","preparedQuery","toLowerCase","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d18f0e8e.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[]\n  onTodoSelected: (todoId: number) => void,\n  selectedTodoId: number,\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onTodoSelected,\n  selectedTodoId,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <tr\n          key={todo.id}\n          data-cy=\"todo\"\n          className=\"\"\n        >\n          <td className=\"is-vcentered\">\n            {todo.id}\n          </td>\n          <td className=\"is-vcentered\">\n            {todo.completed && (\n              <span className=\"icon\" data-cy=\"iconCompleted\">\n                <i className=\"fas fa-check\" />\n              </span>\n            )}\n          </td>\n          <td className=\"is-vcentered is-expanded\">\n            <p className={classNames({\n              'has-text-danger': !todo.completed,\n              'has-text-success': todo.completed,\n            })}\n            >\n              {todo.title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => {\n                onTodoSelected(todo.id);\n              }}\n            >\n              <span className=\"icon\">\n                <i className={classNames(\n                  'far',\n                  {\n                    'fa-eye': selectedTodoId !== todo.id,\n                    'fa-eye-slash': selectedTodoId === todo.id,\n                  },\n                )}\n                />\n              </span>\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","import React from 'react';\n\ninterface Props {\n  searchQuery: string;\n  todosFilter: string;\n  onSearchQueryChange: (searchQuery: string) => void;\n  onTodosFilterChange: (todosFilter: string) => void;\n}\nexport const TodoFilter: React.FC<Props> = ({\n  searchQuery,\n  todosFilter,\n  onSearchQueryChange,\n  onTodosFilterChange,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={todosFilter}\n            onChange={(event) => {\n              onTodosFilterChange(event.target.value);\n            }}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={searchQuery}\n          onChange={(event) => {\n            onSearchQueryChange(event.target.value);\n          }}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {searchQuery && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => {\n                onSearchQueryChange('');\n              }}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ninterface Props {\n  todo: Todo\n  clearSelectedTodo: () => void;\n}\n\nexport const TodoModal: React.FC<Props> = ({\n  todo,\n  clearSelectedTodo,\n}) => {\n  const [user, setUser] = useState<User>();\n  const [isLoadingError, setIsLoadingError] = useState(false);\n\n  useEffect(() => {\n    const getUserFromServer = async () => {\n      const userFromServer = await getUser(todo.userId);\n\n      setUser(userFromServer);\n    };\n\n    getUserFromServer()\n      .catch(() => setIsLoadingError(true));\n  }, []);\n\n  return (\n    <div\n      className={classNames(\n        'modal',\n        {\n          'is-active': todo,\n        },\n      )}\n      data-cy=\"modal\"\n    >\n      <div className=\"modal-background\" />\n\n      {!user\n        ? (isLoadingError && <p>Error, server is unavailable</p>) || <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${todo.id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={clearSelectedTodo}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {todo.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {todo.completed\n                  ? <strong className=\"has-text-success\">Done</strong>\n                  : <strong className=\"has-text-danger\">Planned</strong> }\n\n                {' by '}\n\n                <a href={`mailto:${user.email}`}>\n                  {user.name}\n                </a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isDataLoading, setIsDataLoading] = useState(true);\n  const [isLoadingError, setIsLoadingError] = useState(false);\n  const [selectedTodoId, setSelectedTodoId] = useState(0);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [todosFilter, setTodosFilter] = useState('all');\n\n  let visibleTodos = todos.filter(todo => {\n    switch (todosFilter) {\n      case 'active':\n        return !todo.completed;\n      case 'completed':\n        return todo.completed;\n      case 'all':\n        return true;\n      default:\n        throw new Error('Wrong todo status');\n    }\n  });\n\n  const [selectedTodo] = visibleTodos.filter(todo => todo.id === selectedTodoId);\n  const clearSelectedTodo = () => {\n    setSelectedTodoId(0);\n  };\n\n  useEffect(() => {\n    const todosFromServer = async () => {\n      const allTodos = await getTodos();\n\n      setTodos(allTodos);\n      setIsDataLoading(false);\n    };\n\n    todosFromServer()\n      .catch(() => setIsLoadingError(true));\n  }, []);\n\n  if (searchQuery) {\n    visibleTodos = visibleTodos.filter(todo => {\n      const preparedQuery = searchQuery.toLowerCase();\n      const preparedTitle = todo.title.toLowerCase();\n\n      return preparedTitle.includes(preparedQuery);\n    });\n  }\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                searchQuery={searchQuery}\n                todosFilter={todosFilter}\n                onSearchQueryChange={setSearchQuery}\n                onTodosFilterChange={setTodosFilter}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoadingError || (isDataLoading && <Loader />)}\n              {isLoadingError\n                ? <p>Error, server is unavailable</p>\n                : (\n                  <TodoList\n                    todos={visibleTodos}\n                    onTodoSelected={setSelectedTodoId}\n                    selectedTodoId={selectedTodoId}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {selectedTodoId !== 0\n        && (\n          <TodoModal\n            todo={selectedTodo}\n            clearSelectedTodo={clearSelectedTodo}\n          />\n        )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}